pragma solidity ^0.4.24;


contract ECRecovers {

    /**
     * @dev Recover signer address from a message by using his signature
     * @param hash Signed message
     * @param sig The bytes signature generated by web3.eth.sign()
     */
    function recoverSigner(
        bytes32 hash, 
        bytes sig
    ) 
        public 
        pure 
        returns (address) 
    {
        bytes32 r;
        bytes32 s;
        uint8 v;

        //Check the signature length
        if (sig.length != 65) {
            return (address(0));
        }

        // Divide the signature in r, s and v variables
        assembly {
            r := mload(add(sig, 32))
            s := mload(add(sig, 64))
            v := byte(0, mload(add(sig, 96)))
        }

        // Version of signature should be 27 or 28, 
        // but 0 and 1 are also possible versions
        if (v < 27) {
            v += 27;
        }

        // If the version is correct return the signer address
        if (v != 27 && v != 28) {
            return (address(0));
        } else {
            return ecrecover(hash, v, r, s);
        }
    }

    /**
     * @notice Recover signer from SHA3 data
     * @param _data Raw string (not signed)
     * @param _v Signature paramter: v
     * @param _r Signature paramter: r
     * @param _s Signature paramter: s
     */
    function recoverSignerFromSHA3Data(
        bytes32 _data, 
        uint8 _v, 
        bytes32 _r, 
        bytes32 _s
    ) public pure returns(address) {
        bytes memory _prefix = "\x19Ethereum Signed Message:\n32";
        bytes32 _hash = keccak256(abi.encodePacked(_prefix, _data));
        return ecrecover(_hash, _v, _r, _s);
    }

    /**
     * @notice Recover signer from raw string (not signed or hashed)
     * @dev Almost equal to recover signer from SHA3 data
     * @dev This function do SHA3 in contract (use keccak256())
     * @param _str Raw string (not signed or hashed)
     * @param _v Signature paramter: v
     * @param _r Signature paramter: r
     * @param _s Signature paramter: s
     */
    function recoverSignerFromRawString(
        string _str, 
        uint8 _v, 
        bytes32 _r, 
        bytes32 _s
    ) public pure returns(address) {
        bytes32 _h = keccak256(abi.encodePacked(_str));
        bytes memory _prefix = "\x19Ethereum Signed Message:\n32";
        bytes32 _hash = keccak256(abi.encodePacked(_prefix, _h));
        return ecrecover(_hash, _v, _r, _s);
    }

    /**
     * @notice Recover signer from typed data
     * @param _addr address typed data
     * @param _num uint256 typed data
     * @param _v Signature paramter: v
     * @param _r Signature paramter: r
     * @param _s Signature paramter: s
     */
    function recoverSignerFromTypedData(
        address _addr,
        uint256 _num,
        uint8 _v, 
        bytes32 _r, 
        bytes32 _s
    ) public view returns(address) {
        bytes32 _h = keccak256(abi.encodePacked(_addr, _num));
        bytes memory _prefix = "\x19Ethereum Signed Message:\n32";
        bytes32 _hash = keccak256(abi.encodePacked(_prefix, _h));
        return ecrecover(_hash, _v, _r, _s);
    }
}